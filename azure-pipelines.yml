# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

stages:
- stage: BuildGhost
  displayName: Build Ghost
  pool:
    vmImage: 'windows-latest'
  jobs:
    - job: BuildGhost
      displayName: Build Ghost
      steps:


      - task: UseNode@1
        inputs:
          version: '10.16.3'
      - script: node -v
      - script: node -p "process.arch"
      - task: Cache@2
        inputs:
          key: 'v3 | yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            v3 | yarn | "$(Agent.OS)"
            v3 | yarn
          path: $(YARN_CACHE_FOLDER)
        displayName: Cache Yarn packages
      
     
      - script: yarn
      - script: yarn add jsonwebtoken
      
      - task: ArchiveFiles@2
        displayName: 'Archive files '
        inputs:
          rootFolderOrFile: '$(Build.Repository.LocalPath)'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          replaceExistingArchive: true

      - task: CopyFiles@2
        displayName: 'Copy File to: $(TargetFolder)'
        inputs:
          SourceFolder: '$(Build.ArtifactStagingDirectory)'
          Contents: '$(Build.BuildId).zip'
          TargetFolder: '$(Build.ArtifactStagingDirectory)\ArtifactsToBePublished'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\ArtifactsToBePublished'
          ArtifactName: 'drop'
          publishLocation: 'Container'
- stage: DeployStaging
  displayName: Deploy Staging
  dependsOn: BuildGhost
  condition: succeeded('BuildGhost')
  pool:
    vmImage: 'windows-latest'
  jobs:
  - deployment: DeployStaging
    displayName: Deploy Staging
    environment: '$(EnvironmentStaging)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Stop Azure App Service'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              Action: 'Stop Azure App Service'
              WebAppName: '$(WebApp)'
              SpecifySlotOrASE: true
              ResourceGroupName: '$(ResourceGroup)'
              Slot: '$(SlotNameStaging)'
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service to Slot'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(AzureSubscription)'
              appType: 'webApp'
              WebAppName: '$(WebApp)'
              deployToSlotOrASE: true
              ResourceGroupName: '$(ResourceGroup)'
              SlotName: '$(SlotNameStaging)'
              packageForLinux: '$(Pipeline.Workspace)\**\*.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              ExcludeFilesFromAppDataFlag: false
          - task: AzureAppServiceManage@0
            displayName: 'Start Azure App Service'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              Action: 'Start Azure App Service'
              WebAppName: '$(WebApp)'
              SpecifySlotOrASE: true
              ResourceGroupName: '$(ResourceGroup)'
              Slot: '$(SlotNameStaging)'
          - task: Webapp Warmup@1
            inputs:
              Url: '$(UrlStaging)'
              SleepPeriod: '10'
- stage: DeployProduction
  displayName: Deploy Production
  dependsOn: DeployStaging
  condition: succeeded('DeployStaging')
  pool:
    vmImage: 'windows-latest'
  jobs:
  - deployment: DeployProduction
    displayName: Deploy Production
    environment: $(EnvironmentProduction)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Swap Slots'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              Action: 'Swap Slots'
              WebAppName: '$(WebApp)'
              ResourceGroupName: '$(ResourceGroup)'
              SourceSlot: '$(SlotNameStaging)'

          - task: Webapp Warmup@1
            inputs:
              Url: '$(UrlProduction)'
              SleepPeriod: '10'
- stage: UpdateStaging
  displayName: Update Staging
  dependsOn: DeployProduction
  condition: succeeded('DeployProduction')
  jobs:
  - job: DelayUpdateStaging
    displayName: Delay Update Staging
    pool: server
    steps:
      - task: Delay@1
        inputs:
          delayForMinutes: '5'
  - deployment: UpdateStaging
    displayName: Update Staging
    dependsOn: DelayUpdateStaging
    condition: succeeded('DelayUpdateStaging')
    environment: $(EnvironmentStaging)
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Stop Azure App Service'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              Action: 'Stop Azure App Service'
              WebAppName: '$(WebApp)'
              SpecifySlotOrASE: true
              ResourceGroupName: '$(ResourceGroup)'
              Slot: '$(SlotNameStaging)'
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service to Slot'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(AzureSubscription)'
              appType: 'webApp'
              WebAppName: '$(WebApp)'
              deployToSlotOrASE: true
              ResourceGroupName: '$(ResourceGroup)'
              SlotName: '$(SlotNameStaging)'
              packageForLinux: '$(Pipeline.Workspace)\**\*.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              ExcludeFilesFromAppDataFlag: false
          - task: AzureAppServiceManage@0
            displayName: 'Start Azure App Service'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              Action: 'Start Azure App Service'
              WebAppName: '$(WebApp)'
              SpecifySlotOrASE: true
              ResourceGroupName: '$(ResourceGroup)'
              Slot: '$(SlotNameStaging)'
          - task: Webapp Warmup@1
            inputs:
              Url: '$(UrlStaging)'
              SleepPeriod: '10'